//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@allow('all', true)
model Category {
  id          String    @id() @default(uuid())
  name        String?
  description String?
  products    Product[] @relation("category")
  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Company {
  id          String    @id() @default(uuid())
  name        String?
  description String?
  logoUrl     String?
  products    Product[] @relation("company")
  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Product {
  id          String      @id() @default(uuid())
  name        String?
  description String?
  imageUrl    String?
  categoryId  String?
  category    Category?   @relation(fields: [categoryId], references: [id], name: "category")
  companyId   String?
  company     Company?    @relation(fields: [companyId], references: [id], name: "company")
  inventorys  Inventory[] @relation("product")
  pricings    Pricing[]   @relation("product")
  orderItems  OrderItem[] @relation("product")
  reviews     Review[]    @relation("product")
  dateCreated DateTime    @default(now())
  dateUpdated DateTime    @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Inventory {
  id          String   @id() @default(uuid())
  quantity    Float?
  lastUpdated String?
  productId   String?
  product     Product? @relation(fields: [productId], references: [id], name: "product")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Pricing {
  id          String   @id() @default(uuid())
  price       String?
  startDate   String?
  endDate     String?
  productId   String?
  product     Product? @relation(fields: [productId], references: [id], name: "product")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Order {
  id          String      @id() @default(uuid())
  orderDate   String?
  status      String?
  totalAmount String?
  userId      String?
  user        User?       @relation(fields: [userId], references: [id], name: "user")
  orderItems  OrderItem[] @relation("order")
  dateCreated DateTime    @default(now())
  dateUpdated DateTime    @default(now()) @updatedAt()
}

/// @@allow('all', true)
model OrderItem {
  id          String   @id() @default(uuid())
  quantity    Float?
  price       String?
  orderId     String?
  order       Order?   @relation(fields: [orderId], references: [id], name: "order")
  productId   String?
  product     Product? @relation(fields: [productId], references: [id], name: "product")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Review {
  id          String   @id() @default(uuid())
  rating      Float?
  comment     String?
  createdAt   String?
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  productId   String?
  product     Product? @relation(fields: [productId], references: [id], name: "product")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                String             @id() @default(uuid())
  name              String?
  email             String?            @unique()
  pictureUrl        String?            @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation   String?
  emailVerified     Boolean?
  stripeCustomerId  String?
  status            UserStatus         @default(VERIFIED)
  globalRole        String             @default("USER")
  /// @password
  /// @omit
  password          String?
  dateCreated       DateTime           @default(now())
  dateUpdated       DateTime           @default(now()) @updatedAt()
  accounts          Account[]
  sessions          Session[]
  pushNotifications PushNotification[] @relation("user")
  orders            Order[]            @relation("user")
  reviews           Review[]           @relation("user")
}

/// @@allow('all', true)
model PushNotification {
  id           String   @id() @default(uuid())
  endpoint     String
  subscription String
  dateCreated  DateTime @default(now())
  dateUpdated  DateTime @default(now()) @updatedAt()
  userId       String
  user         User     @relation(fields: [userId], references: [id], name: "user")
}

/// @@allow('all', auth().id == user.id)
model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

/// @@allow('all', auth().id == user.id)
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
